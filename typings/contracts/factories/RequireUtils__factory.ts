/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { RequireUtils } from "../RequireUtils";

export class RequireUtils__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _factory: string,
    _mainModule: string,
    overrides?: Overrides
  ): Promise<RequireUtils> {
    return super.deploy(
      _factory,
      _mainModule,
      overrides || {}
    ) as Promise<RequireUtils>;
  }
  getDeployTransaction(
    _factory: string,
    _mainModule: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(_factory, _mainModule, overrides || {});
  }
  attach(address: string): RequireUtils {
    return super.attach(address) as RequireUtils;
  }
  connect(signer: Signer): RequireUtils__factory {
    return super.connect(signer) as RequireUtils__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RequireUtils {
    return new Contract(address, _abi, signerOrProvider) as RequireUtils;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_factory",
        type: "address",
      },
      {
        internalType: "address",
        name: "_mainModule",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_wallet",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "_imageHash",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_threshold",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "_signers",
        type: "bytes",
      },
    ],
    name: "RequiredConfig",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_wallet",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_threshold",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "weight",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "signer",
            type: "address",
          },
        ],
        internalType: "struct RequireUtils.Member[]",
        name: "_members",
        type: "tuple[]",
      },
    ],
    name: "requireConfig",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_wallet",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_nonce",
        type: "uint256",
      },
    ],
    name: "requireMinNonce",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_expiration",
        type: "uint256",
      },
    ],
    name: "requireNonExpired",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405234801561001057600080fd5b50604051610b0f380380610b0f83398101604081905261002f916100b1565b606082811b6001600160601b03191660a0526040805191820190526028808252610ae76020830139816001600160a01b03166040516020016100729291906100e3565b60408051601f198184030181529190528051602090910120608052506101229050565b80516001600160a01b03811681146100ac57600080fd5b919050565b600080604083850312156100c3578182fd5b6100cc83610095565b91506100da60208401610095565b90509250929050565b60008351815b8181101561010357602081870181015185830152016100e9565b818111156101115782828501525b509190910191825250602001919050565b60805160a05160601c61099f6101486000398061039c5250806103c0525061099f6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80637f29d53814610046578063b472f0a21461005b578063e16131231461006e575b600080fd5b61005961005436600461060e565b610081565b005b610059610069366004610548565b6100c6565b61005961007c366004610571565b6101a4565b8042106100c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100ba9061081d565b60405180910390fd5b50565b6000806100d2836104e5565b9150915060008473ffffffffffffffffffffffffffffffffffffffff16638c3f5563846040518263ffffffff1660e01b815260040161011191906108d8565b60206040518083038186803b15801561012957600080fd5b505afa15801561013d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061016191906105f6565b90508181101561019d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100ba906107c0565b5050505050565b8260005b8281101561023d57818484838181106101bd57fe5b905060400201600001358585848181106101d357fe5b90506040020160200160208101906101eb9190610527565b6040516020016101fd93929190610737565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052805160209091012091506001016101a8565b506000808673ffffffffffffffffffffffffffffffffffffffff166351605d8060e01b604051602001610270919061068a565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290526102a8916106b7565b6000604051808303816000865af19150503d80600081146102e5576040519150601f19603f3d011682016040523d82523d6000602084013e6102ea565b606091505b50915091508180156102fd575080516020145b156103595760008180602001905181019061031891906105f6565b9050838114610353576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100ba90610763565b5061044e565b60405173ffffffffffffffffffffffffffffffffffffffff8816906103e8907fff00000000000000000000000000000000000000000000000000000000000000907f00000000000000000000000000000000000000000000000000000000000000009087907f000000000000000000000000000000000000000000000000000000000000000090602001610626565b6040516020818303038152906040528051906020012060001c73ffffffffffffffffffffffffffffffffffffffff161461044e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100ba9061087a565b828773ffffffffffffffffffffffffffffffffffffffff167fb502b7446ca079086188acf3abef47c2f464f2ee9a72fcdf05ffcb74dcc17cee88888860405160200161049b9291906106d3565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290526104d492916108e1565b60405180910390a350505050505050565b606081901c916bffffffffffffffffffffffff90911690565b803573ffffffffffffffffffffffffffffffffffffffff8116811461052257600080fd5b919050565b600060208284031215610538578081fd5b610541826104fe565b9392505050565b6000806040838503121561055a578081fd5b610563836104fe565b946020939093013593505050565b60008060008060608587031215610586578182fd5b61058f856104fe565b935060208501359250604085013567ffffffffffffffff808211156105b2578384fd5b818701915087601f8301126105c5578384fd5b8135818111156105d3578485fd5b8860206040830285010111156105e7578485fd5b95989497505060200194505050565b600060208284031215610607578081fd5b5051919050565b60006020828403121561061f578081fd5b5035919050565b7fff0000000000000000000000000000000000000000000000000000000000000094909416845260609290921b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660018401526015830152603582015260550190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260040190565b600082516106c9818460208701610939565b9190910192915050565b6020808252818101839052600090604080840186845b8781101561072a578135835273ffffffffffffffffffffffffffffffffffffffff6107158684016104fe565b168386015291830191908301906001016106e9565b5090979650505050505050565b928352602083019190915273ffffffffffffffffffffffffffffffffffffffff16604082015260600190565b60208082526031908201527f526571756972655574696c732372657175697265436f6e6669673a20554e455860408201527f5045435445445f494d4147455f48415348000000000000000000000000000000606082015260800190565b60208082526032908201527f526571756972655574696c7323726571756972654d696e4e6f6e63653a204e4f60408201527f4e43455f42454c4f575f52455155495245440000000000000000000000000000606082015260800190565b60208082526027908201527f526571756972655574696c7323726571756972654e6f6e457870697265643a2060408201527f4558504952454400000000000000000000000000000000000000000000000000606082015260800190565b602080825260409082018190527f526571756972655574696c732372657175697265436f6e6669673a20554e4558908201527f5045435445445f434f554e5445524641435455414c5f494d4147455f48415348606082015260800190565b90815260200190565b6000838252604060208301528251806040840152610906816060850160208701610939565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016060019392505050565b60005b8381101561095457818101518382015260200161093c565b83811115610963576000848401525b5050505056fea2646970667358221220888ab397e0c575ff6da5b98237500698e7cc5537c12daddb6df58555c1ad675764736f6c63430007060033603a600e3d39601a805130553df3363d3d373d3d3d363d30545af43d82803e903d91601857fd5bf3";

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MultiCallUtilsInterface extends ethers.utils.Interface {
  functions: {
    "callBalanceOf(address)": FunctionFragment;
    "callBlockNumber()": FunctionFragment;
    "callBlockhash(uint256)": FunctionFragment;
    "callChainId()": FunctionFragment;
    "callCode(address)": FunctionFragment;
    "callCodeHash(address)": FunctionFragment;
    "callCodeSize(address)": FunctionFragment;
    "callCoinbase()": FunctionFragment;
    "callDifficulty()": FunctionFragment;
    "callGasLeft()": FunctionFragment;
    "callGasLimit()": FunctionFragment;
    "callGasPrice()": FunctionFragment;
    "callOrigin()": FunctionFragment;
    "callTimestamp()": FunctionFragment;
    "multiCall(tuple[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "callBalanceOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "callBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "callBlockhash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "callChainId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "callCode", values: [string]): string;
  encodeFunctionData(
    functionFragment: "callCodeHash",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "callCodeSize",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "callCoinbase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "callDifficulty",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "callGasLeft",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "callGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "callGasPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "callOrigin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "callTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multiCall",
    values: [
      {
        delegateCall: boolean;
        revertOnError: boolean;
        gasLimit: BigNumberish;
        target: string;
        value: BigNumberish;
        data: BytesLike;
      }[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "callBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callBlockhash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "callCode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "callCodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callCodeSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callCoinbase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callDifficulty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callGasLeft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callGasPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "callOrigin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "callTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multiCall", data: BytesLike): Result;

  events: {};
}

export class MultiCallUtils extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MultiCallUtilsInterface;

  functions: {
    callBalanceOf(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "callBalanceOf(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    callBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    "callBlockNumber()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    callBlockhash(
      _i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "callBlockhash(uint256)"(
      _i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    callChainId(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { id: BigNumber }>;

    "callChainId()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { id: BigNumber }>;

    callCode(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<[string] & { code: string }>;

    "callCode(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<[string] & { code: string }>;

    callCodeHash(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<[string] & { codeHash: string }>;

    "callCodeHash(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<[string] & { codeHash: string }>;

    callCodeSize(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { size: BigNumber }>;

    "callCodeSize(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { size: BigNumber }>;

    callCoinbase(overrides?: CallOverrides): Promise<[string]>;

    "callCoinbase()"(overrides?: CallOverrides): Promise<[string]>;

    callDifficulty(overrides?: CallOverrides): Promise<[BigNumber]>;

    "callDifficulty()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    callGasLeft(overrides?: CallOverrides): Promise<[BigNumber]>;

    "callGasLeft()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    callGasLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    "callGasLimit()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    callGasPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    "callGasPrice()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    callOrigin(overrides?: CallOverrides): Promise<[string]>;

    "callOrigin()"(overrides?: CallOverrides): Promise<[string]>;

    callTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    "callTimestamp()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    multiCall(
      _txs: {
        delegateCall: boolean;
        revertOnError: boolean;
        gasLimit: BigNumberish;
        target: string;
        value: BigNumberish;
        data: BytesLike;
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "multiCall(tuple[])"(
      _txs: {
        delegateCall: boolean;
        revertOnError: boolean;
        gasLimit: BigNumberish;
        target: string;
        value: BigNumberish;
        data: BytesLike;
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  callBalanceOf(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

  "callBalanceOf(address)"(
    _addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  "callBlockNumber()"(overrides?: CallOverrides): Promise<BigNumber>;

  callBlockhash(_i: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "callBlockhash(uint256)"(
    _i: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callChainId(overrides?: CallOverrides): Promise<BigNumber>;

  "callChainId()"(overrides?: CallOverrides): Promise<BigNumber>;

  callCode(_addr: string, overrides?: CallOverrides): Promise<string>;

  "callCode(address)"(
    _addr: string,
    overrides?: CallOverrides
  ): Promise<string>;

  callCodeHash(_addr: string, overrides?: CallOverrides): Promise<string>;

  "callCodeHash(address)"(
    _addr: string,
    overrides?: CallOverrides
  ): Promise<string>;

  callCodeSize(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

  "callCodeSize(address)"(
    _addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callCoinbase(overrides?: CallOverrides): Promise<string>;

  "callCoinbase()"(overrides?: CallOverrides): Promise<string>;

  callDifficulty(overrides?: CallOverrides): Promise<BigNumber>;

  "callDifficulty()"(overrides?: CallOverrides): Promise<BigNumber>;

  callGasLeft(overrides?: CallOverrides): Promise<BigNumber>;

  "callGasLeft()"(overrides?: CallOverrides): Promise<BigNumber>;

  callGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

  "callGasLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

  callGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "callGasPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  callOrigin(overrides?: CallOverrides): Promise<string>;

  "callOrigin()"(overrides?: CallOverrides): Promise<string>;

  callTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  "callTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

  multiCall(
    _txs: {
      delegateCall: boolean;
      revertOnError: boolean;
      gasLimit: BigNumberish;
      target: string;
      value: BigNumberish;
      data: BytesLike;
    }[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "multiCall(tuple[])"(
    _txs: {
      delegateCall: boolean;
      revertOnError: boolean;
      gasLimit: BigNumberish;
      target: string;
      value: BigNumberish;
      data: BytesLike;
    }[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    callBalanceOf(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    "callBalanceOf(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    callBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    "callBlockNumber()"(overrides?: CallOverrides): Promise<BigNumber>;

    callBlockhash(_i: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "callBlockhash(uint256)"(
      _i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    callChainId(overrides?: CallOverrides): Promise<BigNumber>;

    "callChainId()"(overrides?: CallOverrides): Promise<BigNumber>;

    callCode(_addr: string, overrides?: CallOverrides): Promise<string>;

    "callCode(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<string>;

    callCodeHash(_addr: string, overrides?: CallOverrides): Promise<string>;

    "callCodeHash(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<string>;

    callCodeSize(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    "callCodeSize(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    callCoinbase(overrides?: CallOverrides): Promise<string>;

    "callCoinbase()"(overrides?: CallOverrides): Promise<string>;

    callDifficulty(overrides?: CallOverrides): Promise<BigNumber>;

    "callDifficulty()"(overrides?: CallOverrides): Promise<BigNumber>;

    callGasLeft(overrides?: CallOverrides): Promise<BigNumber>;

    "callGasLeft()"(overrides?: CallOverrides): Promise<BigNumber>;

    callGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "callGasLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    callGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "callGasPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    callOrigin(overrides?: CallOverrides): Promise<string>;

    "callOrigin()"(overrides?: CallOverrides): Promise<string>;

    callTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "callTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    multiCall(
      _txs: {
        delegateCall: boolean;
        revertOnError: boolean;
        gasLimit: BigNumberish;
        target: string;
        value: BigNumberish;
        data: BytesLike;
      }[],
      overrides?: CallOverrides
    ): Promise<
      [boolean[], string[]] & { _successes: boolean[]; _results: string[] }
    >;

    "multiCall(tuple[])"(
      _txs: {
        delegateCall: boolean;
        revertOnError: boolean;
        gasLimit: BigNumberish;
        target: string;
        value: BigNumberish;
        data: BytesLike;
      }[],
      overrides?: CallOverrides
    ): Promise<
      [boolean[], string[]] & { _successes: boolean[]; _results: string[] }
    >;
  };

  filters: {};

  estimateGas: {
    callBalanceOf(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    "callBalanceOf(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    callBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    "callBlockNumber()"(overrides?: CallOverrides): Promise<BigNumber>;

    callBlockhash(
      _i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "callBlockhash(uint256)"(
      _i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    callChainId(overrides?: CallOverrides): Promise<BigNumber>;

    "callChainId()"(overrides?: CallOverrides): Promise<BigNumber>;

    callCode(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    "callCode(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    callCodeHash(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    "callCodeHash(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    callCodeSize(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    "callCodeSize(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    callCoinbase(overrides?: CallOverrides): Promise<BigNumber>;

    "callCoinbase()"(overrides?: CallOverrides): Promise<BigNumber>;

    callDifficulty(overrides?: CallOverrides): Promise<BigNumber>;

    "callDifficulty()"(overrides?: CallOverrides): Promise<BigNumber>;

    callGasLeft(overrides?: CallOverrides): Promise<BigNumber>;

    "callGasLeft()"(overrides?: CallOverrides): Promise<BigNumber>;

    callGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "callGasLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    callGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "callGasPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    callOrigin(overrides?: CallOverrides): Promise<BigNumber>;

    "callOrigin()"(overrides?: CallOverrides): Promise<BigNumber>;

    callTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "callTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    multiCall(
      _txs: {
        delegateCall: boolean;
        revertOnError: boolean;
        gasLimit: BigNumberish;
        target: string;
        value: BigNumberish;
        data: BytesLike;
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "multiCall(tuple[])"(
      _txs: {
        delegateCall: boolean;
        revertOnError: boolean;
        gasLimit: BigNumberish;
        target: string;
        value: BigNumberish;
        data: BytesLike;
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    callBalanceOf(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "callBalanceOf(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    callBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "callBlockNumber()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    callBlockhash(
      _i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "callBlockhash(uint256)"(
      _i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    callChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "callChainId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    callCode(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "callCode(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    callCodeHash(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "callCodeHash(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    callCodeSize(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "callCodeSize(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    callCoinbase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "callCoinbase()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    callDifficulty(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "callDifficulty()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    callGasLeft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "callGasLeft()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    callGasLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "callGasLimit()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    callGasPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "callGasPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    callOrigin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "callOrigin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    callTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "callTimestamp()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multiCall(
      _txs: {
        delegateCall: boolean;
        revertOnError: boolean;
        gasLimit: BigNumberish;
        target: string;
        value: BigNumberish;
        data: BytesLike;
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "multiCall(tuple[])"(
      _txs: {
        delegateCall: boolean;
        revertOnError: boolean;
        gasLimit: BigNumberish;
        target: string;
        value: BigNumberish;
        data: BytesLike;
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

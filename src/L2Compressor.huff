#include "./Errors.huff"

#define constant ADDR_BYTES_STORAGE = 0x00
#define constant FMS = 0xc0
#define constant NESTED_READ_FLAG_RETURN_MSLOT = 0xa0

#define constant FLAG_READ_BYTES32_2_BYTES = 0x27
#define constant FLAG_READ_ADDRESS_2_BYTES = 0x23

#define constant BYTES32_SMV = 0x80
#define constant ADDRESS_SMV = 0x01

// #define jumptable FLAG_SELECTORS {
//   execute_many_transactions:
//   execute_transaction:
//   read_address:
//   read_bytes32:
//   sizes:
  
// }

// #define macro MAIN() = takes (0) returns (0) {
  
// }

#define macro ADDRESSES_NUM() = takes (0) returns (1) {
  [ADDR_BYTES_STORAGE] sload // [packed]
  0x80 shr                 // [num]

  // output stack: [num]
}

#define macro PULL_ADDRESS() = takes(0) returns (1) {
  [ADDR_BYTES_STORAGE] sload // [packed]
  dup1                       // [packed, packed]
  0x80 shr                   // [num, packed]

  0x01 add                   // [num + 1, packed]
  swap1                      // [packed, num + 1]

  // Mask packed (only want lower 128 bits)
  0xffffffffffffffffffffffffffffffff and

  dup2                       // [num + 1, packed, num + 1]
  0x80 shl                   // [num + 1 << 0x80, packed, num + 1]
  or                         // [nextpacked, num + 1]

  [ADDR_BYTES_STORAGE] sstore // [num + 1]

  // output stack: [num + 1]
}

#define macro BYTES32_STORAGE_POINTER() = takes (1) returns (1) {
  // input stack: [index]
  0x80 shl
  // output stack: [index << 0x80]
}

#define macro ADDRESS_STORAGE_POINTER() = takes (1) returns (1) {
  // input stack: [index]
  0x01 add
  // output stack: [index + 1]
}

#define macro BYTES32_NUM() = takes (0) returns (1) {
  [ADDR_BYTES_STORAGE] sload             // [packed]
  0xffffffffffffffffffffffffffffffff and // [num]

  // output stack: [num]
}

#define macro PULL_BYTES32() = takes(0) returns (1) {
  [ADDR_BYTES_STORAGE] sload             // [packed]
  dup1                                   // [packed, packed]
  0xffffffffffffffffffffffffffffffff and // [num, packed]

  0x01 add                               // [num + 1, packed]
  swap1                                  // [packed, num + 1]

  0xffffffffffffffffffffffffffffffff00000000000000000000000000000000 and // [packed, num + 1]

  dup2                                   // [num + 1, packed, num + 1]
  or                                     // [nextpacked, num + 1]

  [ADDR_BYTES_STORAGE] sstore            // [num + 1]

  // output stack: [num + 1]
}

#define jumptable__packed FLAG_TABLE {
  FLAG_READ_BYTES32_0_BYTES  // 0x00
  FLAG_READ_BYTES32_1_BYTES  // 0x01
  FLAG_READ_BYTES32_2_BYTES  // 0x02
  FLAG_READ_BYTES32_3_BYTES  // 0x03
  FLAG_READ_BYTES32_4_BYTES  // 0x04
  FLAG_READ_BYTES32_5_BYTES  // 0x05
  FLAG_READ_BYTES32_6_BYTES  // 0x06
  FLAG_READ_BYTES32_7_BYTES  // 0x07
  FLAG_READ_BYTES32_8_BYTES  // 0x08
  FLAG_READ_BYTES32_9_BYTES  // 0x09
  FLAG_READ_BYTES32_10_BYTES // 0x0a
  FLAG_READ_BYTES32_11_BYTES // 0x0b
  FLAG_READ_BYTES32_12_BYTES // 0x0c
  FLAG_READ_BYTES32_13_BYTES // 0x0d
  FLAG_READ_BYTES32_14_BYTES // 0x0e
  FLAG_READ_BYTES32_15_BYTES // 0x0f
  FLAG_READ_BYTES32_16_BYTES // 0x10
  FLAG_READ_BYTES32_17_BYTES // 0x11
  FLAG_READ_BYTES32_18_BYTES // 0x12
  FLAG_READ_BYTES32_19_BYTES // 0x13
  FLAG_READ_BYTES32_20_BYTES // 0x14
  FLAG_READ_BYTES32_21_BYTES // 0x15
  FLAG_READ_BYTES32_22_BYTES // 0x16
  FLAG_READ_BYTES32_23_BYTES // 0x17
  FLAG_READ_BYTES32_24_BYTES // 0x18
  FLAG_READ_BYTES32_25_BYTES // 0x19
  FLAG_READ_BYTES32_26_BYTES // 0x1a
  FLAG_READ_BYTES32_27_BYTES // 0x1b
  FLAG_READ_BYTES32_28_BYTES // 0x1c
  FLAG_READ_BYTES32_29_BYTES // 0x1d
  FLAG_READ_BYTES32_30_BYTES // 0x1e
  FLAG_READ_BYTES32_31_BYTES // 0x1f
  FLAG_READ_BYTES32_32_BYTES // 0x20
  JUMP_SAVE_ADDRESS          // 0x21
  JUMP_SAVE_BYTES32          // 0x22
  JUMP_READ_ADDRESS_2        // 0x23
  JUMP_READ_ADDRESS_3        // 0x24
  JUMP_READ_ADDRESS_4        // 0x25
  JUMP_READ_ADDRESS_5        // 0x26
  JUMP_READ_BYTES32_2        // 0x27
  JUMP_READ_BYTES32_3        // 0x28
  JUMP_READ_BYTES32_4        // 0x29
  JUMP_READ_BYTES32_5        // 0x2a
  JUMP_READ_N_BYTES          // 0x2b
  JUMP_READ_POWER_OF_2       // 0x2c
  FLAG_ABI_0_PARAM           // 0x2d
  FLAG_ABI_1_PARAM           // 0x2e
  FLAG_ABI_2_PARAMS          // 0x2f
  FLAG_ABI_3_PARAMS          // 0x20
  FLAG_ABI_4_PARAMS          // 0x31
  FLAG_ABI_5_PARAMS          // 0x32
  FLAG_ABI_6_PARAMS          // 0x33
  FLAG_NESTED_N_FLAGS_8      // 0x34
  FLAG_NESTED_N_FLAGS_16     // 0x35
  // Signature specific methods
  FLAG_SIGNATURE_W0          // 0x36
  FLAG_SIGNATURE_W1          // 0x37
  FLAG_SIGNATURE_W2          // 0x38
  FLAG_SIGNATURE_W3          // 0x39
  FLAG_SIGNATURE_W4          // 0x3a
  FLAG_ADDRESS_W0            // 0x3b
  FLAG_ADDRESS_W1            // 0x3c
  FLAG_ADDRESS_W2            // 0x3d
  FLAG_ADDRESS_W3            // 0x3f
  FLAG_ADDRESS_W4            // 0x40
}

#define constant HIGHEST_FLAG = 0x40

#define macro READ_FLAG() = takes (2) returns (2) {
  nrfs:
  FN_READ_FLAG(nrfs)
}

#define macro FN_READ_FLAG(nrfs) = takes (2) returns (2) {
  // input stack: [windex, rindex]

  dup2          // [rindex, windex, rindex]
  calldataload  // [cdata[rindex], windex, rindex]
  0x00 byte     // [flag, windex, rindex]

  swap2         // [rindex, windex, flag]
  0x01 add      // [rindex + 1, windex, flag]
  swap2         // [flag, windex, rindex + 1]

  dup1                        // [flag, flag, windex, rindex + 1]
  [HIGHEST_FLAG] lt           // [HIGHEST_FLAG < flag, flag, windex, rindex + 1]
  default jumpi               // [flag, windex, rindex + 1]

  // Starts to become cheaper to skip the loading
  // after 5 times, most real world cases will have more than
  // 5 times. Notice that this assumes a single READ_FLAG instance
  0x00 mload no_load jumpi
    __tablesize(FLAG_TABLE)     // [table_size, flag, windex, rindex + 1]
    __tablestart(FLAG_TABLE)    // [table_start, table_size, flag, windex, rindex + 1]
    0x00                        // [0x00, table_start, table_size, flag, windex, rindex + 1]
    codecopy                    // [flag, windex, rindex + 1]
  no_load:

  0x01 shl                    // [flag << 0x01, windex, rindex + 1]
  mload                       // [word, windex, rindex + 1]
  0xf0 shr                    // [word >> 0xf0, windex, rindex + 1]
  jump                        // [windex, rindex + 1]

  FLAG_READ_BYTES32_0_BYTES:
    READ_BYTES32_EMPTY()     // [windex, rindex]
    end jump
  FLAG_READ_BYTES32_1_BYTES:
    READ_BYTES32(0xf8, 0x01) // [windex, rindex]
    end jump
  FLAG_READ_BYTES32_2_BYTES:
    READ_BYTES32(0xf0, 0x02) // [windex, rindex]
    end jump
  FLAG_READ_BYTES32_3_BYTES:
    READ_BYTES32(0xe8, 0x03) // [windex, rindex]
    end jump
  FLAG_READ_BYTES32_4_BYTES:
    READ_BYTES32(0xe0, 0x04) // [windex, rindex]
    end jump
  FLAG_READ_BYTES32_5_BYTES:
    READ_BYTES32(0xd8, 0x05) // [windex, rindex]
    end jump
  FLAG_READ_BYTES32_6_BYTES:
    READ_BYTES32(0xd0, 0x06) // [windex, rindex]
    end jump
  FLAG_READ_BYTES32_7_BYTES:
    READ_BYTES32(0xc8, 0x07) // [windex, rindex]
    end jump
  FLAG_READ_BYTES32_8_BYTES:
    READ_BYTES32(0xc0, 0x08) // [windex, rindex]
    end jump
  FLAG_READ_BYTES32_9_BYTES:
    READ_BYTES32(0xb8, 0x09) // [windex, rindex]
    end jump
  FLAG_READ_BYTES32_10_BYTES:
    READ_BYTES32(0xb0, 0x0a) // [windex, rindex]
    end jump
  FLAG_READ_BYTES32_11_BYTES:
    READ_BYTES32(0xa8, 0x0b) // [windex, rindex]
    end jump
  FLAG_READ_BYTES32_12_BYTES:
    READ_BYTES32(0xa0, 0x0c) // [windex, rindex]
    end jump
  FLAG_READ_BYTES32_13_BYTES:
    READ_BYTES32(0x98, 0x0d) // [windex, rindex]
    end jump
  FLAG_READ_BYTES32_14_BYTES:
    READ_BYTES32(0x90, 0x0e) // [windex, rindex]
    end jump
  FLAG_READ_BYTES32_15_BYTES:
    READ_BYTES32(0x88, 0x0f) // [windex, rindex]
    end jump
  FLAG_READ_BYTES32_16_BYTES:
    READ_BYTES32(0x80, 0x10) // [windex, rindex]
    end jump
  FLAG_READ_BYTES32_17_BYTES:
    READ_BYTES32(0x78, 0x11) // [windex, rindex]
    end jump
  FLAG_READ_BYTES32_18_BYTES:
    READ_BYTES32(0x70, 0x12) // [windex, rindex]
    end jump
  FLAG_READ_BYTES32_19_BYTES:
    READ_BYTES32(0x68, 0x13) // [windex, rindex]
    end jump
  FLAG_READ_BYTES32_20_BYTES:
    READ_BYTES32(0x60, 0x14) // [windex, rindex]
    end jump
  FLAG_READ_BYTES32_21_BYTES:
    READ_BYTES32(0x58, 0x15) // [windex, rindex]
    end jump
  FLAG_READ_BYTES32_22_BYTES:
    READ_BYTES32(0x50, 0x16) // [windex, rindex]
    end jump
  FLAG_READ_BYTES32_23_BYTES:
    READ_BYTES32(0x48, 0x17) // [windex, rindex]
    end jump
  FLAG_READ_BYTES32_24_BYTES:
    READ_BYTES32(0x40, 0x18) // [windex, rindex]
    end jump
  FLAG_READ_BYTES32_25_BYTES:
    READ_BYTES32(0x38, 0x19) // [windex, rindex]
    end jump
  FLAG_READ_BYTES32_26_BYTES:
    READ_BYTES32(0x30, 0x1a) // [windex, rindex]
    end jump
  FLAG_READ_BYTES32_27_BYTES:
    READ_BYTES32(0x28, 0x1b) // [windex, rindex]
    end jump
  FLAG_READ_BYTES32_28_BYTES:
    READ_BYTES32(0x20, 0x1c) // [windex, rindex]
    end jump
  FLAG_READ_BYTES32_29_BYTES:
    READ_BYTES32(0x18, 0x1d) // [windex, rindex]
    end jump
  FLAG_READ_BYTES32_30_BYTES:
    READ_BYTES32(0x10, 0x1e) // [windex, rindex]
    end jump
  FLAG_READ_BYTES32_31_BYTES:
    READ_BYTES32(0x08, 0x1f) // [windex, rindex]
    end jump
  FLAG_READ_BYTES32_32_BYTES:
    READ_BYTES32_WORD()      // [windex, rindex]
    end jump

  JUMP_SAVE_ADDRESS:
    SAVE_ADDRESS() // [windex, rindex]
    end jump

  JUMP_SAVE_BYTES32:
    SAVE_BYTES32() // [windex, rindex]
    end jump

  JUMP_READ_ADDRESS_2:
    READ_ADDRESS_STORAGE(0x02, 0xf0)  // [windex, rindex]
    end jump
  JUMP_READ_ADDRESS_3:
    READ_ADDRESS_STORAGE(0x03, 0xe8)  // [windex, rindex]
    end jump
  JUMP_READ_ADDRESS_4:
    READ_ADDRESS_STORAGE(0x04, 0xe0)  // [windex, rindex]
    end jump
  JUMP_READ_ADDRESS_5:
    READ_ADDRESS_STORAGE(0x05, 0xd8)  // [windex, rindex]
    end jump

  JUMP_READ_BYTES32_2:
    READ_BYTES32_STORAGE(0x02, 0xf0)  // [windex, rindex]
    end jump
  JUMP_READ_BYTES32_3:
    READ_BYTES32_STORAGE(0x03, 0xe8)  // [windex, rindex]
    end jump
  JUMP_READ_BYTES32_4:
    READ_BYTES32_STORAGE(0x04, 0xe0)  // [windex, rindex]
    end jump
  JUMP_READ_BYTES32_5:
    READ_BYTES32_STORAGE(0x05, 0xd8)  // [windex, rindex]
    end jump

  JUMP_READ_N_BYTES:
    READ_N_BYTES(nrfs) // [windex, rindex]
    end jump

  JUMP_READ_POWER_OF_2:
    READ_POWER_OF_2()   // [windex, rindex]
    end jump

  FLAG_ABI_0_PARAM:
    READ_ABI_0() // [windex, rindex]
    end jump
  FLAG_ABI_1_PARAM:
    READ_ABI_1(nrfs) // [windex, rindex]
    end jump
  FLAG_ABI_2_PARAMS:
    READ_ABI_2(nrfs) // [windex, rindex]
    end jump
  FLAG_ABI_3_PARAMS:
    READ_ABI_3(nrfs) // [windex, rindex]
    end jump
  FLAG_ABI_4_PARAMS:
    READ_ABI_4(nrfs) // [windex, rindex]
    end jump
  FLAG_ABI_5_PARAMS:
    READ_ABI_5(nrfs) // [windex, rindex]
    end jump
  FLAG_ABI_6_PARAMS:
    READ_ABI_6(nrfs) // [windex, rindex]
    end jump
    
  FLAG_NESTED_N_FLAGS_8:
    READ_NESTED_N_FLAGS_8(nrfs)  // [windex, rindex]
    end jump 
  FLAG_NESTED_N_FLAGS_16:
    READ_NESTED_N_FLAGS_16(nrfs) // [windex, rindex]
    end jump 

  FLAG_SIGNATURE_W0:
    READ_SIGNATURE_W0()     // [windex, rindex]
    end jump
  FLAG_SIGNATURE_W1:
    READ_SIGNATURE_WX(0x01) // [windex, rindex]
    end jump
  FLAG_SIGNATURE_W2:
    READ_SIGNATURE_WX(0x02) // [windex, rindex]
    end jump
  FLAG_SIGNATURE_W3:
    READ_SIGNATURE_WX(0x03) // [windex, rindex]
    end jump
  FLAG_SIGNATURE_W4:
    READ_SIGNATURE_WX(0x04) // [windex, rindex]
    end jump

  FLAG_ADDRESS_W0:
    READ_ADDRESS_W0(nrfs)     // [windex, rindex]
    end jump
  FLAG_ADDRESS_W1:
    READ_ADDRESS_WX(nrfs, 0x01) // [windex, rindex]
    end jump
  FLAG_ADDRESS_W2:
    READ_ADDRESS_WX(nrfs, 0x02) // [windex, rindex]
    end jump
  FLAG_ADDRESS_W3:
    READ_ADDRESS_WX(nrfs, 0x03) // [windex, rindex]
    end jump
  FLAG_ADDRESS_W4:
    READ_ADDRESS_WX(nrfs, 0x04) // [windex, rindex]
    end jump

  default:
    // The default just pushes the flag as a byte (padded to 32 bytes)
    // notice that we start at 0x01 since 0x00 can be pushed with the flag 0x00
    [HIGHEST_FLAG]  // [HIGHEST_FLAG, flag, windex, rindex]
    swap1 sub       // [flag - HIGHEST_FLAG, windex, rindex]
    dup2            // [windex, flag - HIGHEST_FLAG, windex, rindex]
    mstore          // [windex, rindex]
    0x20 add        // [windex + 0x20, rindex]

  end:

  // If the NESTED memory slot is not 0, then we need to jump there
  // but each "return" only takes 2 bytes, so we need to only jump to
  // to the last 2 bytes. Notice that this limits nested calls to a depth
  // of 16 only.

  [NESTED_READ_FLAG_RETURN_MSLOT] mload  // [nrfr, windex, rindex]
  0xffff and                             // [nrfr & 0xffff, windex, rindex]
  dup1 jumpi                             // [windex, rindex]
}

#define macro PERFORM_NESTED_READ_FLAG(nrfs) = takes(0) returns (0) {
  // input stack: []

  [NESTED_READ_FLAG_RETURN_MSLOT] mload // [nrfr]
  0x10 shl                              // [nrfr << 0x10]
  back or                               // [nrfr << 0x10 | back]
  [NESTED_READ_FLAG_RETURN_MSLOT]       // [nrfr, new_nrfr]
  mstore                                // []

  <nrfs> jump // []

  back:

  // Clear the last callback pointer
  [NESTED_READ_FLAG_RETURN_MSLOT] mload  // [nrfr]
  0x10 shr                               // [nrfr >> 0x10]
  [NESTED_READ_FLAG_RETURN_MSLOT] mstore // []
}

#define macro BACKREAD_SINGLE_VALUE() = takes (1) returns (2) {
  // input stack: [windex]

  0x20 swap1 sub // [windex - 0x20]
  dup1           // [windex - 0x20, windex - 0x20]

  mload          // [mem[windex - 0x20], windex - 0x20]

  // output stack: [mem[windex - 0x20], windex - 0x20]
}

#define macro READ_NESTED_N_FLAGS_8(nrfs) = takes (2) returns (2) {
  // input stack: [windex, rindex]

  swap1       // [rindex, windex]
  LOAD_DYNAMIC_SIZE(0x01, 0xf8)  // [size, rindex, windex]

  swap2       // [windex, rindex, size]
  READ_NESTED_N_FLAGS(nrfs)

  // output stack: [windex, rindex]
}

#define macro READ_NESTED_N_FLAGS_16(nrfs) = takes (2) returns (2) {
  // input stack: [windex, rindex]

  swap1       // [rindex, windex]
  LOAD_DYNAMIC_SIZE(0x02, 0xf0)  // [size, rindex, windex]

  swap2       // [windex, rindex, size]
  READ_NESTED_N_FLAGS(nrfs)

  // output stack: [windex, rindex]
}

#define macro READ_NESTED_N_FLAGS(nrfs) = takes (3) returns (2) {
  // input stack: [windex, rindex, n]

  0x00          // [i, windex, rindex, n]

  read_more:    // [i, windex, rindex, n]

    swap2       // [rindex, windex, i, n]
    swap1       // [windex, rindex, i, n]
    
    PERFORM_NESTED_READ_FLAG(nrfs) // [windex, rindex, i, n]

    swap1                          // [rindex, windex, i, n]
    swap2                          // [i, windex, rindex, n]

    0x01 add                       // [i + 1, windex, rindex, n]

    dup4                           // [n, i, windex, rindex, n]
    dup2                           // [i, n, i, windex, rindex, n]
    lt                             // [(i < n), i, windex, rindex, n]
    
    read_more jumpi                // [i, windex, rindex, n]

  pop           // [windex, rindex, n]
  swap2         // [n, rindex, windex]
  pop           // [rindex, windex]
  swap1         // [windex, rindex]

  // output stack: [windex, rindex]
}

#define macro READ_SIGNATURE_W0() = takes (2) returns (2) {
  // input stack: [windex, rindex]

  swap1        // [rindex, windex]

  LOAD_DYNAMIC_SIZE(0x01, 0xf8)   // [weight, rindex, windex]

  swap2        // [windex, rindex, weight]

  READ_SIGNATURE()                // [windex, rindex]

  // output stack: [windex, rindex]
}

#define macro READ_SIGNATURE_WX(weight) = takes (2) returns (2) {
  // input stack: [windex, rindex]

  swap1        // [rindex, windex]
  <weight>     // [weight, rindex, windex]
  swap2        // [windex, rindex, weight]

  READ_SIGNATURE()                // [windex, rindex]

  // output stack: [windex, rindex]
}

#define macro READ_SIGNATURE() = takes (3) returns (2) {
  // input stack: [windex, rindex, weight]

  // First thing we must write is the flag (sequence)

  0x00          // [0x00, windex, rindex, weight]
  dup2          // [windex, 0x00, windex, rindex, weight]
  mstore        // [windex, rindex, weight]
  0x01 add      // [windex, rindex, weight]

  // Second thing we must write is the weight, always 1 byte

  swap2         // [weight, rindex, windex]
  dup3          // [windex, weight, rindex, windex]
  mstore8       // [rindex, windex]
  swap1         // [windex, rindex]
  0x01 add      // [windex, rindex]

  // EOA signatures are always 66 bytes long
  // we can just copy them

  0x42          // [0x42, windex, rindex]
  dup1          // [0x42, 0x42, windex, rindex]

  dup4          // [rindex, 0x42, 0x42, windex, rindex]
  dup4          // [windex, rindex, 0x42, 0x42, windex, rindex]
  calldatacopy  // [0x42, windex, rindex]

  dup1          // [0x42, 0x42, windex, rindex]
  swap3         // [rindex, 0x42, windex, 0x42]
  add           // [rindex, windex, 0x42]
  swap2         // [0x42, windex, rindex]
  add           // [windex, rindex]

  // output stack: [windex, rindex]
}

#define macro READ_ADDRESS_W0(nrfs) = takes (2) returns (2) {
  // input stack: [windex, rindex]

  swap1        // [rindex, windex]

  LOAD_DYNAMIC_SIZE(0x01, 0xf8)   // [weight, rindex, windex]

  swap2        // [windex, rindex, weight]

  READ_ADDRESS(nrfs)              // [windex, rindex]

  // output stack: [windex, rindex]
}

#define macro READ_ADDRESS_WX(nrfs, weight) = takes (2) returns (2) {
  // input stack: [windex, rindex]

  swap1        // [rindex, windex]
  <weight>     // [weight, rindex, windex]
  swap2        // [windex, rindex, weight]

  READ_ADDRESS(nrfs) // [windex, rindex]

  // output stack: [windex, rindex]
}

#define macro READ_ADDRESS(nrfs) = takes (3) returns (2) {
  // input stack: [windex, rindex, weight]

  // First thing we must write is the flag (sequence)

  0x01          // [0x01, windex, rindex, weight]
  dup2          // [windex, 0x01, windex, rindex, weight]
  mstore8       // [windex, rindex, weight]
  0x01 add      // [windex, rindex, weight]

  // Second thing we must write is the weight, always 1 byte

  swap2         // [weight, rindex, windex]
  dup3          // [windex, weight, rindex, windex]
  mstore8       // [rindex, windex]
  swap1         // [windex, rindex]
  0x01 add      // [windex, rindex]

  // Addresses are always 20 bytes long
  // we use a nested read flag call, since this address
  // could come from storage

  PERFORM_NESTED_READ_FLAG(nrfs)  // [windex, rindex]
  BACKREAD_SINGLE_VALUE()         // [word, windex, rindex]

  0x60 shl                        // [address, windex, rindex]

  dup2                            // [windex, word, windex, rindex]
  mstore                          // [windex, rindex]

  0x14 add                        // [windex + 0x14, rindex]
}

#[calldata("0x02f1f2")]
#define test TEST_READ_FLAG_2_BYTES() = {
  0x00  // [rindex]
  [FMS] // [windex, rindex]

  READ_FLAG() // [windex, rindex]

  0x20 [FMS] add eq ASSERT() // [rindex]
  0x03 eq ASSERT()           // []

  [FMS] mload 0xf1f2 eq ASSERT() // []
}

#[calldata("0x1000")]
#define test TEST_READ_FLAG_0_BYTES() = {
  0x02  // [rindex]
  [FMS] // [windex, rindex]

  // Store something
  0x10 [FMS] mstore

  READ_FLAG() // [windex, rindex]

  0x20 [FMS] add eq ASSERT() // [rindex]
  0x03 eq ASSERT()           // []

  [FMS] mload 0x00 eq ASSERT() // []
}

#define test TEST_NUMS() = {
  ADDRESSES_NUM()  // [num]
  0x00 eq ASSERT() // []

  PULL_ADDRESS()   // [nnum]
  0x01 eq ASSERT() // []

  ADDRESSES_NUM()  // [num]
  0x01 eq ASSERT() // []

  PULL_ADDRESS()   // [nnum]
  0x02 eq ASSERT() // []

  ADDRESSES_NUM()  // [num]
  0x02 eq ASSERT() // []

  PULL_BYTES32()   // [nnum]
  0x01 eq ASSERT() // []

  BYTES32_NUM()    // [num]
  0x01 eq ASSERT() // []

  ADDRESSES_NUM()  // [num]
  0x02 eq ASSERT() // []

  PULL_ADDRESS()   // [nnum]
  0x03 eq ASSERT() // []

  BYTES32_NUM()   // [nnum]
  0x01 eq ASSERT() // []

  PULL_BYTES32()   // [nnum]
  0x02 eq ASSERT() // []

  BYTES32_NUM()    // [num]
  0x02 eq ASSERT() // []

  ADDRESSES_NUM()  // [num]
  0x03 eq ASSERT() // []
}

#define macro READ_EXECUTE_STANDALONE() = takes (2) returns (2) {
  skip jump
  rf:
  READ_FLAG()
  skip:
  READ_EXECUTE(rf)
}

#define macro READ_EXECUTE(nrfs) = takes (2) returns (2) {
  // input stack: [windex, rindex]

  // The execution function signature of Sequence is 0x7a9a1628

  __RIGHTPAD(0x7a9a1628)  // [0x7a9a1628, windex, rindex]
  dup2                    // [windex, 0x7a9a1628, windex, rindex]
  mstore                  // [windex, rindex]
  0x04 add                // [windex, rindex]

  // The first value is always where do the list of transactions starts
  // this is always the same, as the list of transactions is the first
  // dynamic type

  0x60        // [0x60, windex, rindex]
  dup2        // [windex, 0x60, windex, rindex]
  mstore      // [windex, rindex]
  0x20 add    // [windex, rindex]

  // Reading the nonce is the simplest one, it is just a value

  READ_NONCE(nrfs)  // [windex, rindex]

  // We can't know when the signature will start, since we need to
  // read the list of transactions first. So we leave a copy of the pointer
  // to write it later.
  
  swap1         // [rindex, windex]
  dup2          // [windex, rindex, prev_windex]
  0x20 add      // [windex, rindex, prev_windex]

  // We start reading the transactions, the macro takes care of writting the
  // internal pointers for them (and the number of transactions)

  READ_TRANSACTIONS(nrfs) // [windex, rindex, prev_windex]

  // The signature starts at windex - prev_windex + 0x20
  // and the pointer needs to be written to prev_windex

  swap1               // [rindex, windex, prev_windex]
  swap2               // [prev_windex, windex, rindex]
  dup1                // [prev_windex, prev_windex, windex, rindex]
  dup3                // [windex, prev_windex, prev_windex, windex, rindex]
  sub                 // [(windex - prev_windex), prev_windex, windex, rindex]
  0x40 add            // [sig_starts, prev_windex, windex, rindex]
  swap1               // [prev_windex, sig_starts, windex, rindex]

  mstore              // [windex, rindex]

  // Now we can read the signature, we just read a nested flag, it can generate
  // a Sequence signature. We only need to take care of the size and the padding

  0x20 add            // [windex, rindex]
  swap1               // [rindex, windex]
  dup2                // [windex, rindex, prev_index]

  PERFORM_NESTED_READ_FLAG(nrfs)

  swap1               // [rindex, windex, prev_windex]
  swap2               // [prev_windex, windex, rindex]
  dup1                // [prev_windex, prev_windex, windex, rindex]
  dup3                // [windex, prev_windex, prev_windex, windex, rindex]
  sub                 // [size, prev_windex, windex, rindex]
  dup1                // [size, size, prev_windex, windex, rindex]
  swap2               // [prev_windex, size, size, windex, rindex]
  0x20 swap1 sub      // [size_place, size, size, windex, rindex]
  mstore              // [size, windex, rindex]

  // Last thing is handling the padding, bytes need to be multiple of 0x20

  0x00                // [0x00, size, windex, rindex]
  dup3                // [windex, 0x00, size, windex, rindex]
  mstore              // [size, windex, rindex]

  0x1f and            // [size % 32, windex, rindex]
  0x20 sub            // [pad_diff, windex, rindex]
  0x1f and            // [pad_diff % 32, windex, rindex]
  add                 // [(padd_diff + windex), rindex]

  // output stack: [windex, rindex]
}

#define macro READ_NONCE_STANDALONE() = takes (2) returns (2) {
  skip jump
  rf:
  READ_FLAG()
  skip:
  READ_NONCE(rf)
}

#define macro READ_NONCE(nrfs) = takes (2) returns (2) {
  // input stack: [windex, rindex]

  PERFORM_NESTED_READ_FLAG(<nrfs>) // [windex, rindex]
  BACKREAD_SINGLE_VALUE()          // [val, windex, rindex]

  0x60 shl                         // [space, windex, rindex]

  swap2                            // [rindex, windex, space]
  swap1                            // [windex, rindex, space]

  PERFORM_NESTED_READ_FLAG(<nrfs>) // [windex, rindex, space]
  BACKREAD_SINGLE_VALUE()          // [nonce, windex, rindex, space]

  // Assume that we are reading the nonce already masked

  swap1                            // [windex, nonce, rindex, space]
  swap2                            // [rindex, nonce, windex, space]
  swap3                            // [space, nonce, windex, rindex]
  or                               // [(space | nonce), windex, rindex]

  // Now we have the compact representation of the nonce
  // we can write it to memory on windex

  dup2                             // [windex, (space | nonce), windex, rindex]
  mstore                           // [windex, rindex]

  0x20 add                         // [windex + 0x20, rindex]

  // output stack: [windex, rindex]
}

#define macro READ_TRANSACTIONS_STANDALONE() = takes (2) returns (2) {
  skip jump
  rf:
  READ_FLAG()
  skip:
  READ_TRANSACTIONS(rf)
}

#define macro READ_TRANSACTIONS(nrfs) = takes (2) returns (2) {
  // input stack: [windex, rindex]

  dup2          // [rindex, windex, rindex]
  calldataload  // [mem[rindex], windex, rindex]
  0x00 byte     // [tx_num, windex, rindex]
  swap2         // [rindex, windex, tx_num]
  0x01 add      // [rindex + 1, windex, tx_num]
  0x00          // [i, rindex, windex, tx_num]

  swap3         // [tx_num, rindex, windex, i]
  swap2         // [windex, rindex, tx_num, i]

  // Write the number of transactions

  dup3         // [tx_num, windex, rindex, tx_num, i]
  dup2         // [windex, tx_num, windex, rindex, tx_num, i]
  mstore       // [windex, rindex, tx_num, i]
  0x20 add     // [windex + 0x20, rindex, tx_num, i]

  // Reserve 32 bytes for each tx (excluding the first one, as we already know)
  // these will be used to store start of each tx

  // The first transaction will always start at 0x20 * txs + 0x20

  dup3         // [tx_num, windex, rindex, tx_num, i]
  0x05 shl     // [r_start, windex, rindex, tx_num, i]
  dup1         // [r_start, r_start, windex, rindex, tx_num, i]
  
  dup3         // [windex, r_start, r_start, ts_index, rindex, tx_num, i]
  add          // [windex, r_start, ts_index, rindex, tx_num, i]
  
  swap3        // [rindex, r_start, ts_index, windex, tx_num, i]
  dup4         // [windex, rindex, r_start, ts_index, windex, tx_num, i]

  do_tx:       // [windex, rindex, pos, ts_index, windex, tx_num, i]

    // store pos for this transaction
    // but keep a copy of it as it will be used again

    swap2         // [pos, rindex, windex, ts_index, windex, tx_num, i]
    dup1          // [pos, pos, rindex, windex, ts_index, windex, tx_num, i]
    dup5          // [ts_index, pos, pos, rindex, windex, ts_index, windex, tx_num, i]
    mstore        // [pos, rindex, windex, ts_index, windex, tx_num, i]

    swap3         // [ts_index, rindex, windex, pos, windex, tx_num, i]
    0x20 add      // [ts_index, rindex, windex, pos, windex, tx_num, i]
    
    swap3         // [pos, rindex, windex, ts_index, windex, tx_num, i]
    swap2         // [windex, rindex, pos, ts_index, windex, tx_num, i]

    READ_TRANSACTION(<nrfs>) // [windex, rindex, pos, ts_index, prev_windex, tx_num, i]

    // size = windex - prev_windex

    swap4                    // [prev_windex, rindex, r_start, ts_index, windex, tx_num, i]
    dup5                     // [windex, prev_windex, rindex, r_start, ts_index, windex, tx_num, i]
    sub                      // [tx_i_size, rindex, r_start, ts_index, windex, tx_num, i]

    // pos = size + r_start

    swap1                    // [rindex, tx_i_size, r_start, ts_index, windex, tx_num, i]
    swap2                    // [r_start, tx_i_size, rindex, ts_index, windex, tx_num, i]
    add                      // [pos, rindex, ts_index, windex, tx_num, i]

    // Re-arrange the stack, we are about to loop back

    swap1                    // [rindex, pos, ts_index, windex, tx_num, i]
    dup4                     // [windex, rindex, pos, ts_index, windex, tx_num, i]

    // Check if we have more to read
    swap6                    // [i, rindex, pos, ts_index, windex, tx_num, windex]
    0x01 add                 // [i + 1, rindex, pos, ts_index, windex, tx_num, windex]
    swap6                    // [windex, rindex, pos, ts_index, windex, tx_num, i]
    dup7                     // [i, windex, rindex, pos, ts_index, windex, tx_num, i]

    // The ts_index contains the index of the transaction x 32, we can
    // easily get the i and compare it with the len of transactions to know if we must continue or not

    dup7                     // [tx_num, i, windex, rindex, pos, ts_index, windex, tx_num, i]
    xor do_tx jumpi          // [windex, rindex, pos, ts_index, windex, tx_num, i]

  pop                        // [rindex, pos, ts_index, windex, tx_num, i]
  swap5                      // [i, pos, ts_index, windex, tx_num, rindex]
  pop                        // [pos, ts_index, windex, tx_num, rindex]
  pop                        // [ts_index, windex, tx_num, rindex]
  pop                        // [windex, tx_num, rindex]
  swap1                      // [tx_num, windex, rindex]
  pop                        // [windex, rindex]

  // output stack: [windex, rindex]
}

#define macro READ_TRANSACTION_STANDALONE() = takes (2) returns (2) {
  skip jump
  rf:
  READ_FLAG()
  skip:
  READ_TRANSACTION(rf)
}

#define macro READ_TRANSACTION(nrfs) = takes (2) returns (2) {
  // input stack: [windex, rindex]

  // The first byte gives us information about what the transaction contains

  dup2          // [rindex, windex, rindex]
  calldataload  // [cdata[rindex], windex, rindex]
  0x00 byte     // [tflag, windex, rindex]
  swap2         // [rindex, windex, tflag]
  0x01 add      // [rindex + 1, windex, tflag]
  swap2         // [tflag, windex, rindex + 1]

  // First bit of the flag determines if the transaction uses delegateCall

  dup1          // [tflag, tflag, windex, rindex]
  0x07 shr      // [tflag >> 0x07, tflag, windex, rindex]
  dup3          // [windex, tflag >> 0x07, tflag, windex, rindex]
  mstore        // [tflag, windex, rindex]

  swap1         // [windex, tflag, rindex]
  0x20 add      // [windex + 0x20, tflag, rindex]

  // Second bit of the flag determines if the transaction uses revertOnError

  dup2          // [tflag, windex, tflag, rindex]
  0x06 shr      // [tflag >> 0x06, windex, tflag, rindex]
  0x01 and      // [tflag >> 0x06 & 0x01, windex, tflag, rindex]
  dup2          // [windex, tflag >> 0x06 & 0x01, windex, tflag, rindex]
  mstore        // [windex, tflag, rindex]

  0x20 add      // [windex + 0x20, tflag, rindex]

  // Third bit of the flag determines if the transaction has a defined gasLimit

  dup2                // [tflag, windex, tflag, rindex]
  0x05 shr            // [tflag >> 0x05, windex, tflag, rindex]
  0x01 and            // [has_gas_limit, windex, tflag, rindex]
  has_gas_limit jumpi // [windex, tflag, rindex]

    // The transaction has no gas_limit, we still need to write 0s
    // to the memory and push the write index

    0x00 dup2 mstore // [windex, tflag, rindex]
    0x20 add         // [windex + 0x20, tflag, rindex]

    // Re-arrange the stack so it matches the other branch

    swap1         // [tflag, windex, rindex]
    swap2         // [rindex, windex, tflag]
    swap1         // [windex, rindex, tflag]

    end_gas_Limit_if jump

  has_gas_limit:

    // Read advanced; this should only increase 32 bytes
    // but we don't check that, buyer beware

    swap1         // [tflag, windex, rindex]
    swap2         // [rindex, windex, tflag]
    swap1         // [windex, rindex, tflag]

    PERFORM_NESTED_READ_FLAG(<nrfs>)   // [windex, rindex, tflag]

  end_gas_Limit_if:

  // All transactions must define an address
  // this is simple, as it is just one more flag

  PERFORM_NESTED_READ_FLAG(<nrfs>)

  // 4th bit of the flag determines if the transaction has a defined value

  dup3               // [tflag, windex, rindex, tflag]
  0x04 shr           // [tflag >> 0x04, windex, rindex, tflag]
  0x01 and           // [tflag >> 0x04 & 0x01, windex, rindex, tflag]
  has_value jumpi    // [windex, rindex, tflag]

    // The transaction has no value, we still need to write 0s
    // to the memory and push the write index

    0x00 dup2 mstore   // [windex, rindex, tflag]
    0x20 add           // [windex + 0x20, rindex, tflag]
    end_value_if jump

  has_value:

    // Read advanced; this should only increase 32 bytes
    // but we don't check that, buyer beware

    PERFORM_NESTED_READ_FLAG(<nrfs>)   // [windex, rindex, tflag]
  
  end_value_if:

  // 1st bit determines if the transaction has data

  swap2           // [tflag, rindex, windex]
  0x01 and        // [has_data, rindex, windex]  

  swap1           // [rindex, has_data, windex]
  swap2           // [windex, has_data, rindex]
  swap1           // [has_data, windex, rindex]

  has_data jumpi  // [windex, rindex]
    
    // The transaction has no data, we still need to write 0s
    // both for the pointer and size

    // All tx strucs have the same number of parameters, so 0xc0 is always the correct
    //place for the start of the bytes data

    0xc0          // [0xc0, windex, rindex]
    dup2          // [windex, 0xc0, windex, rindex]
    mstore        // [windex, rindex]

    0x20          // [0x20, windex, rindex]
    add           // [(0x20 + windex), rindex]
    0x00          // [0x00, (0x20 + windex), rindex]
    dup2          // [(0x20 + windex), 0x00, (0x20 + windex), rindex]
    mstore        // [windex, rindex]

    0x20          // [0x20, windex, rindex]
    add           // [(0x20 + windex), rindex]

    end_data_if jump

  has_data:       // [windex, rindex]

    // All tx strucs have the same number of parameters, so 0xc0 is always the correct
    //place for the start of the bytes data

    0xc0          // [0xc0, windex, rindex]
    dup2          // [windex, 0xc0, windex, rindex]
    mstore        // [windex, rindex]
    0x20 add      // [windex, rindex]

    // Leave some room to store the size of the data
    0x20 add      // [windex + 0x20, rindex, prev_windex]

    swap1         // [rindex, windex]
    dup2          // [windex, rindex, prev_windex]

    PERFORM_NESTED_READ_FLAG(<nrfs>)   // [windex, rindex, prev_windex]

    dup3          // [prev_windex, windex, rindex, prev_windex]
    dup2          // [windex, prev_windex, windex, rindex, prev_windex]
    sub           // [size, windex, rindex, prev_windex]

    dup1          // [size, size, windex, rindex, prev_windex]

    0x20          // [0x20, size, size, windex, rindex, prev_windex]
    dup6          // [prev_windex, 0x20, size, size, windex, rindex, prev_windex]
    sub           // [(prev_windex - 0x20), size, size, windex, rindex, prev_windex]
    mstore        // [size, windex, rindex, prev_windex]

    // Write some zeros just in case
    0x00          // [0x00, size, windex, rindex, prev_windex]
    dup3          // [windex, 0x00, size, windex, rindex, prev_windex]
    mstore        // [size, windex, rindex, prev_windex]

    // Advance the windex enough so index becomes divisible by 32
    0x1f and      // [size % 32, windex, rindex, prev_windex]
    0x20 sub      // [pad_diff, windex, rindex, prev_windex]
    0x1f and      // [pad_diff % 32, windex, rindex, prev_windex]
    add           // [windex + pad_diff, rindex, prev_windex]

    swap2         // [prev_windex, rindex, windex + pad_diff]
    pop           // [rindex, windex]
    swap1         // [windex, rindex]

  end_data_if:
}

#define macro READ_ABI_4_BYTES() = takes (2) returns (2) {
  // input stack:  [windex, rindex]

  0x04           // [0x04, windex, rindex]
  dup1           // [0x04, 0x04, windex, rindex]
  dup4           // [rindex, 0x04, 0x04, windex, rindex]
  dup4           // [windex, rindex, 0x04, 0x04, windex, rindex]
  calldatacopy   // [0x04, windex, rindex]

  swap2          // [rindex, windex, 0x04]
  dup3           // [0x04, rindex, windex, 0x04]
  add            // [(0x04 + rindex), windex, 0x04]
  swap2          // [0x04, windex, (0x04 + rindex)]
  add            // [(0x04 + windex), (0x04 + rindex)]

  // output stack: [windex, rindex]
}

#define macro READ_ABI_0() = takes (2) returns (2) {
  // input stack:  [windex, rindex]

  READ_ABI_4_BYTES()

  // output stack: [windex, rindex]
}

#define macro READ_ABI_1(nrfs) = takes (2) returns (2) {
  // input stack:  [windex, rindex]

  READ_ABI_4_BYTES()               // [windex, rindex]
  PERFORM_NESTED_READ_FLAG(<nrfs>) // [windex, rindex]

  // output stack: [windex, rindex]
}

#define macro READ_ABI_2(nrfs) = takes (2) returns (2) {
  // input stack:  [windex, rindex]

  READ_ABI_4_BYTES()               // [windex, rindex]
  PERFORM_NESTED_READ_FLAG(<nrfs>) // [windex, rindex]
  PERFORM_NESTED_READ_FLAG(<nrfs>) // [windex, rindex]

  // output stack: [windex, rindex]
}

#define macro READ_ABI_3(nrfs) = takes (2) returns (2) {
  // input stack:  [windex, rindex]

  READ_ABI_4_BYTES()               // [windex, rindex]
  PERFORM_NESTED_READ_FLAG(<nrfs>) // [windex, rindex]
  PERFORM_NESTED_READ_FLAG(<nrfs>) // [windex, rindex]
  PERFORM_NESTED_READ_FLAG(<nrfs>) // [windex, rindex]

  // output stack: [windex, rindex]
}

#define macro READ_ABI_4(nrfs) = takes (2) returns (2) {
  // input stack:  [windex, rindex]

  READ_ABI_4_BYTES()               // [windex, rindex]
  PERFORM_NESTED_READ_FLAG(<nrfs>) // [windex, rindex]
  PERFORM_NESTED_READ_FLAG(<nrfs>) // [windex, rindex]
  PERFORM_NESTED_READ_FLAG(<nrfs>) // [windex, rindex]
  PERFORM_NESTED_READ_FLAG(<nrfs>) // [windex, rindex]

  // output stack: [windex, rindex]
}

#define macro READ_ABI_5(nrfs) = takes (2) returns (2) {
  // input stack:  [windex, rindex]

  READ_ABI_4_BYTES()               // [windex, rindex]
  PERFORM_NESTED_READ_FLAG(<nrfs>) // [windex, rindex]
  PERFORM_NESTED_READ_FLAG(<nrfs>) // [windex, rindex]
  PERFORM_NESTED_READ_FLAG(<nrfs>) // [windex, rindex]
  PERFORM_NESTED_READ_FLAG(<nrfs>) // [windex, rindex]
  PERFORM_NESTED_READ_FLAG(<nrfs>) // [windex, rindex]

  // output stack: [windex, rindex]
}

#define macro READ_ABI_6(nrfs) = takes (2) returns (2) {
  // input stack:  [windex, rindex]

  READ_ABI_4_BYTES()               // [windex, rindex]
  PERFORM_NESTED_READ_FLAG(<nrfs>) // [windex, rindex]
  PERFORM_NESTED_READ_FLAG(<nrfs>) // [windex, rindex]
  PERFORM_NESTED_READ_FLAG(<nrfs>) // [windex, rindex]
  PERFORM_NESTED_READ_FLAG(<nrfs>) // [windex, rindex]
  PERFORM_NESTED_READ_FLAG(<nrfs>) // [windex, rindex]
  PERFORM_NESTED_READ_FLAG(<nrfs>) // [windex, rindex]

  // output stack: [windex, rindex]
}

#define macro READ_BYTES32(shift_bits, read_bytes) = takes (3) returns (2) {
  // input stack: [windex, rindex]

  0x20           // [0x20, windex, rindex]

  dup3           // [rindex, 0x20, windex, rindex]
  calldataload   // [word, 0x20, windex, rindex]

  // Shift to the right so we only read the first <val> bits
  <shift_bits> shr      // [word >> <val>, 0x20, windex, rindex]

  // Store on windex
  dup3           // [windex, word >> <val>, 0x20, windex, rindex]
  mstore         // [0x20, windex, rindex]

  add            // [windex + 0x20, rindex]

  swap1             // [rindex, windex + 0x20]
  <read_bytes> add  // [rindex + <val>, windex + 0x20]
  swap1             // [windex + 0x20, rindex + <val>]

  // output stack: [0x20 + windex, valB + rindex]
}

#define macro READ_BYTES32_EMPTY() = takes (3) returns (2) {
  // input stack: [windex, rindex]

  0x00           // [0x00, windex, rindex]
  dup2           // [windex, 0x00, windex, rindex]
  mstore         // [windex, rindex]

  0x20           // [0x20, windex, rindex]
  add            // [(0x20 + windex), rindex]

  // input stack: [windex, rindex]
}

#define macro READ_BYTES32_WORD() = takes (3) returns (2) {
  // input stack: [windex, rindex]

  0x20           // [0x20, windex, rindex]
  dup1           // [0x20, 0x20, windex, rindex]

  dup4           // [rindex, 0x20, 0x20, windex, rindex]
  calldataload   // [word, 0x20, 0x20, windex, rindex]

  // Store on windex
  dup4           // [windex, word >> <val>, 0x20, 0x20, windex, rindex]
  mstore         // [0x20, 0x20, windex, rindex]

  swap3          // [rindex, 0x20, 0x20, windex]
  add            // [rindex + 0x20, 0x20, windex]
  swap2          // [windex, 0x20, rindex + 0x20]
  add            // [windex + 0x20, rindex + 0x20]

  // output stack: [windex + 0x20, rindex + 0x20]
}

#[calldata("0xb2d10eb37ef5838bb835ea71bbd4053daf8de7bd8ecdf638451a2bc966a145a8"), value(0x01)]
#define test TEST_FLAG_READ_BYTES32() = {
  0x01            // [rindex]
  [FMS] 0x40 add  // [windex, rindex]

  READ_BYTES32(0xf0, 0x02)      // [windex, rindex]

  [FMS] 0x60 add eq ASSERT()    // [rindex]
  0x03 eq ASSERT()                            // []

  [FMS] 0x40 add mload 0xd10e eq ASSERT() // []

  0x00  // [rindex]
  [FMS] // [windex, rindex]

  READ_BYTES32(0x00, 0x20) // [windex, rindex]

  [FMS] 0x20 add eq ASSERT()    // [rindex]
  0x20 eq ASSERT()              // []

  [FMS] mload 0xb2d10eb37ef5838bb835ea71bbd4053daf8de7bd8ecdf638451a2bc966a145a8 eq ASSERT() // []

  0x00           // [rindex]
  [FMS] 0x40 add // [windex, rindex]

  READ_BYTES32_WORD() // [windex, rindex]

  [FMS] 0x60 add eq ASSERT()    // [rindex]
  0x20 eq ASSERT()              // []

  [FMS] 0x40 add
  mload 0xb2d10eb37ef5838bb835ea71bbd4053daf8de7bd8ecdf638451a2bc966a145a8 eq ASSERT() // []

  0x15           // [rindex]
  [FMS] 0x10 add // [windex, rindex]

  READ_BYTES32_EMPTY() // [windex, rindex]

  [FMS] 0x30 add eq ASSERT()    // [rindex]
  0x15 eq ASSERT()              // []

  [FMS] 0x10 add mload 0x00 eq ASSERT() // []
}

#define macro SAVE_ADDRESS() = takes (3) returns (2) {
  // input stack: [windex, rindex]

  dup2           // [rindex, windex, rindex]
  calldataload   // [word, windex, rindex]

  // Clean the address before storing it
  // shifting it to the right by 0x60 bits

  0x60 shr       // [addr, windex, rindex]

  dup1           // [addr, addr, windex, rindex]
  dup3           // [windex, addr, addr, windex, rindex]
  mstore         // [addr, windex, rindex]

  PULL_ADDRESS() ADDRESS_STORAGE_POINTER() sstore // [windex, rindex]

  // Add 32 bytes to windex and 20 to rindex
  0x20 add       // [windex + 0x20, rindex]
  swap1          // [rindex, windex + 0x20]
  0x14 add       // [rindex + 0x14, windex + 0x20]
  swap1          // [windex + 0x20, rindex + 0x14]
  
  // output stack: [windex + 0x20, rindex + 0x14]
}

// 0xd10eb37ef5838bb835ea71bbd4053daf8de7bd8e
#[calldata("0xb2d10eb37ef5838bb835ea71bbd4053daf8de7bd8ecdf638451a2bc966a145a8"), value(0x01)]
#define test TEST_SAVE_ADDRESS() = {
  0x01  // [rindex]
  [FMS] // [windex, rindex]

  SAVE_ADDRESS() // [windex, rindex]

  [FMS] 0x20 add eq ASSERT() // [rindex]
  0x15 eq ASSERT()           // []

  // Validate that memory was written correctly

  [FMS] mload  // [mem[0x20]] ()
  0x000000000000000000000000d10eb37ef5838bb835ea71bbd4053daf8de7bd8e
  eq ASSERT()  // []

  // Validate that the written address is correct
  0x02 sload // [addr]
  0x000000000000000000000000d10eb37ef5838bb835ea71bbd4053daf8de7bd8e
  eq ASSERT() // []

  // Validate that the total increased to 1
  ADDRESSES_NUM() 0x01 eq ASSERT() // []
}

#define macro SAVE_BYTES32() = takes (3) returns (2) {
  // input stack: [windex, rindex]

  dup2           // [rindex, windex, rindex]
  calldataload   // [word, windex, rindex]

  dup1           // [word, word, windex, rindex]

  dup3           // [windex, word, word, windex, rindex]
  mstore         // [word, windex, rindex]

  PULL_BYTES32() BYTES32_STORAGE_POINTER() sstore  // [windex, rindex]

  // Add 32 bytes to both indexes

  0x20 dup1  // [0x20, 0x20, windex, rindex]
  swap3      // [rindex, 0x20, windex, 0x20]
  add        // [rindex + 0x20, 0x20, windex]

  swap2      // [windex, 0x20, rindex + 0x20]
  add        // [windex + 0x20, rindex + 0x20]

  // output stack: [windex + 32, rindex + 32]
}

#[calldata("0xb2d10eb37ef5838bb835ea71bbd4053daf8de7bd8ecdf638451a2bc966a145a899"), value(0x01)]
#define test TEST_SAVE_BYTES32() = {
  0x01 // [rindex]
  0x20 // [windex, rindex]

  SAVE_BYTES32() // [windex, rindex]

  0x40 eq ASSERT()    // []
  0x21 eq ASSERT()    // [rindex]

  // Validate that memory was written correctly

  0x20 mload  // [mem[0x20]] ()
  0xd10eb37ef5838bb835ea71bbd4053daf8de7bd8ecdf638451a2bc966a145a899
  
  eq ASSERT() // []

  // Validate that the written address is correct
  0x01 0x80 shl sload // [addr]
  0xd10eb37ef5838bb835ea71bbd4053daf8de7bd8ecdf638451a2bc966a145a899 eq ASSERT() // []

  // Validate that the total increased to 1
  BYTES32_NUM() 0x01 eq ASSERT() // []
}

// Reads a stored bytes32 using a 2 to 5 bytes pointer index
#define macro READ_BYTES32_STORAGE(read_bytes, read_bits_shift) = takes (3) returns (2) {
  READ_STORAGE(BYTES32_SMV, shl, <read_bytes>, <read_bits_shift>)
}

#define macro READ_ADDRESS_STORAGE(read_bytes, read_bits_shift) = takes (3) returns (2) {
  READ_STORAGE(ADDRESS_SMV, add, <read_bytes>, <read_bits_shift>)
}

#define macro READ_STORAGE(smv, smc, read_bytes, read_bits_shift) = takes (3) returns (2) {
  // input stack: [windex, rindex]

  swap1 // [rindex, windex]

  LOAD_DYNAMIC_SIZE(<read_bytes>, <read_bits_shift>) // [index, nrindex + size, windex]
  <smv> <smc> sload                                 // [bytes32, nrindex + size, windex]

  dup3      // [windex, bytes32, nrindex + size, windex]
  mstore    // [nrindex + size, windex]

  swap1     // [windex, nrindex + size]

  0x20 add  // [windex + 0x20, nrindex + size]

  // output stack: [windex + 0x20, nrindex + size]
}

#[calldata("0x0201f020c002f1e0040203")]
#define test TEST_READ_BYTES32() = {
  // Save 3 different bytes32 values

  0xfe9716a384ec3b055bb8aae87323a14412cbfceb52c95324dccf071fb3f83855
  0x0201 0x80 shl sstore

  0xcf85e6408b0191a7ed9970e635257854b95aa7b708f485ae667e6fd467e5f45e
  0xf020c002 0x80 shl sstore

  0xa577e893e614c9aa4b19f2369e1c177adab9fe3156970a39afc166c0f2d905ee
  0xf1e0040203 0x80 shl sstore

  // Read the first bytes32
  0x00                        // [rindex]
  0x00                        // [windex, rindex]

  READ_BYTES32_STORAGE(0x02, 0xf0) // [windex, rindex]

  0x20 eq ASSERT() // [rindex]
  0x02 eq ASSERT() // []

  0x00 mload 0xfe9716a384ec3b055bb8aae87323a14412cbfceb52c95324dccf071fb3f83855 eq ASSERT() // []

  // Read the second bytes32
  0x02                                 // [rindex]
  0x20                                 // [windex, rindex]

  READ_BYTES32_STORAGE(0x04, 0xe0) // [windex, rindex]

  0x40 eq ASSERT() // [rindex]
  0x06 eq ASSERT() // []

  0x20 mload 0xcf85e6408b0191a7ed9970e635257854b95aa7b708f485ae667e6fd467e5f45e eq ASSERT() // []

  // Read the third bytes32
  0x06                                 // [rindex]
  0x10                                 // [windex, rindex]

  READ_BYTES32_STORAGE(0x05, 0xd8) // [windex, rindex]

  0x30 eq ASSERT() // [rindex]
  0x0b eq ASSERT() // []

  0x10 mload 0xa577e893e614c9aa4b19f2369e1c177adab9fe3156970a39afc166c0f2d905ee eq ASSERT() // []
}

#[calldata("0x0201f020c002f1e0040203")]
#define test TEST_READ_ADDRESS() = {
  // Save 3 different bytes32 values

  0x000000000000000000000000d789f5242a537b0584893b564a8c7a4be35b9238
  0x0201 ADDRESS_STORAGE_POINTER() sstore

  0x000000000000000000000000d5b5127436fd875ab7c334dffb62533ba011c2d9
  0xf020c002 ADDRESS_STORAGE_POINTER() sstore

  0x0000000000000000000000008a745d2b92c6e02e8ed087581c63d073f98f2479
  0xf1e0040203 ADDRESS_STORAGE_POINTER() sstore

  // Read the first bytes32
  0x00                        // [rindex]
  0x00                        // [windex, rindex]

  READ_ADDRESS_STORAGE(0x02, 0xf0) // [windex, rindex]

  0x20 eq ASSERT() // [rindex]
  0x02 eq ASSERT() // []

  0x00 mload 0x000000000000000000000000d789f5242a537b0584893b564a8c7a4be35b9238 eq ASSERT() // []

  // Read the second bytes32
  0x02                                 // [rindex]
  0x20                                 // [windex, rindex]

  READ_ADDRESS_STORAGE(0x04, 0xe0) // [windex, rindex]

  0x40 eq ASSERT() // [rindex]
  0x06 eq ASSERT() // []

  0x20 mload 0x000000000000000000000000d5b5127436fd875ab7c334dffb62533ba011c2d9 eq ASSERT() // []

  // Read the third bytes32
  0x06                                 // [rindex]
  0x10                                 // [windex, rindex]

  READ_ADDRESS_STORAGE(0x05, 0xd8) // [windex, rindex]

  0x30 eq ASSERT() // [rindex]
  0x0b eq ASSERT() // []

  0x10 mload 0x0000000000000000000000008a745d2b92c6e02e8ed087581c63d073f98f2479 eq ASSERT() // []
}

// TODO: The first 4/5 bits of the exponent are never going to be used
// (ther are literals for those values) it may be worth to use them
// for special cases of power_2 (-1, +1, etc).
#define macro READ_POWER_OF_2() = takes (2) returns (2) {
  // input stack: [windex, rindex]

  0x01          // [0x01, windex, rindex]
  dup3          // [rindex, 0x01, windex, rindex]

  calldataload  // [cdata[rindex], 0x01, windex, rindex]

  0x00 byte     // [cdata[rindex][0:8], 0x01, windex, rindex]

  shl           // [0x01 << cdata[rindex][0:8], windex, rindex]

  dup2          // [windex, 0x01 << cdata[rindex][0:8], windex, rindex]
  mstore        // [windex, rindex]


  0x20 add           // [windex + 0x20, rindex]
  swap1              // [rindex, windex + 0x20]
  0x01 add           // [rindex + 0x01, windex + 0x20]
  swap1              // [windex + 0x20, rindex + 0x01]

  // output stack: [windex + 0x20, rindex + 0x01]
}

#[calldata("0x000203ff")]
#define test TEST_READ_POWER_OF_2() = takes (2) returns (2) {
  0x00 // [rindex]
  0x00 // [windex, rindex]

  READ_POWER_OF_2() // [windex, rindex]

  0x20 eq ASSERT() // [rindex]
  0x01 eq ASSERT() // []

  0x00 mload 0x01 eq ASSERT() // []

  0x01 // [rindex]
  0x20 // [windex, rindex]

  READ_POWER_OF_2() // [windex, rindex]

  0x40 eq ASSERT() // [rindex]
  0x02 eq ASSERT() // []

  0x20 mload 0x04 eq ASSERT() // []

  0x02 // [rindex]
  0x05 // [windex, rindex]

  READ_POWER_OF_2() // [windex, rindex]

  0x25 eq ASSERT() // [rindex]
  0x03 eq ASSERT() // []

  0x05 mload 0x08 eq ASSERT() // []

  0x03 // [rindex]
  0x00 // [windex, rindex]

  READ_POWER_OF_2() // [windex, rindex]

  0x20 eq ASSERT() // [rindex]
  0x04 eq ASSERT() // []

  0x00 mload 0x8000000000000000000000000000000000000000000000000000000000000000 eq ASSERT() // []
}

#define macro READ_MAX_UINT256() = takes (2) returns (2) {
  // input stack: [windex, rindex]

  0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff dup2 mstore
  0x20 add           // [windex + 0x20, rindex]

  // output stack: [windex + 0x20, rindex]
}

#define test TEST_READ_MAX_UINT256() = {
  0x00 // [rindex]
  0x10 // [windex, rindex]

  READ_MAX_UINT256() // [windex, rindex]

  0x30 eq ASSERT() // [rindex]
  0x00 eq ASSERT() // []

  0x10 mload 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff eq ASSERT() // []
}

#define macro READ_N_BYTES(nrfs) = takes (2) returns (2) {
  // input stack: [windex, rindex]

  PERFORM_NESTED_READ_FLAG(<nrfs>) // [windex, rindex]
  BACKREAD_SINGLE_VALUE()          // [size, windex, rindex]

  dup2          // [windex, size, windex, rindex + 1]
  dup2 add      // [windex + size, size, windex, rindex + 1]
  swap2         // [windex, size, windex + size, rindex + 1]

  dup4          // [rindex + 1, windex, size, windex + size, rindex + 1]
  dup3          // [size, rindex + 1, windex, size, windex + size, rindex + 1]
  add           // [rindex + 1 + size, windex, size, windex + size, rindex + 1]
  swap4         // [rindex + 1, windex, size, windex + size, rindex + 1 + size]
  swap1         // [windex, rindex + 1, size, windex + size, rindex + 1 + size]

  calldatacopy  // [windex, rindex + 1 + size]

  // output stack: [windex + size, rindex + size]
}


#define macro LOAD_DYNAMIC_SIZE(read_bytes, read_bits_shift) = takes (1) returns (2) {
  // input stack: [rindex]

  dup1               // [rindex, rindex]

  <read_bytes> add   // [rindex + size, rindex]
  swap1              // [rindex, rindex + size]

  calldataload       // [cdata[rindex], rindex]

  // Value needs to be shifted, so we only read
  // the first "size" bytes

  <read_bits_shift>  // [size, cdata[rindex], rindex]
  shr                // [cdata[rindex] >> size bits, size + rindex]

  // output stack: [cdata[rindex] >> size bits, size + rindex]
}

#[calldata("0xb2d10eb37ef5838bb835ea71bbd4053daf8de7bd8ecdf638451a2bc966a145a899")]
#define test TEST_LOAD_DYNAMIC_SIZE() = {
  0x00 // [rindex]

  LOAD_DYNAMIC_SIZE(0x02, 0xf0) // [val, nrindex + size]

  0xb2d1 eq ASSERT()    // [rindex]
  0x02 eq ASSERT()      // []

  0x04 // [rindex]

  LOAD_DYNAMIC_SIZE(0x05, 0xd8) // [val, nrindex + size]

  0x7ef5838bb8 eq ASSERT()    // [rindex]
  0x09 eq ASSERT()            // []
}

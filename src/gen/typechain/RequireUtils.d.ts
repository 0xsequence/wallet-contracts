/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface RequireUtilsInterface extends ethers.utils.Interface {
  functions: {
    "knownImageHashes(address)": FunctionFragment;
    "lastImageHashUpdate(bytes32)": FunctionFragment;
    "lastSignerUpdate(address)": FunctionFragment;
    "lastWalletUpdate(address)": FunctionFragment;
    "publishConfig(address,uint256,tuple[],bool)": FunctionFragment;
    "publishInitialSigners(address,bytes32,uint256,bytes,bool)": FunctionFragment;
    "requireMinNonce(address,uint256)": FunctionFragment;
    "requireNonExpired(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "knownImageHashes",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastImageHashUpdate",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastSignerUpdate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastWalletUpdate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "publishConfig",
    values: [
      string,
      BigNumberish,
      { weight: BigNumberish; signer: string }[],
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "publishInitialSigners",
    values: [string, BytesLike, BigNumberish, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "requireMinNonce",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requireNonExpired",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "knownImageHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastImageHashUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastSignerUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastWalletUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publishConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publishInitialSigners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireMinNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireNonExpired",
    data: BytesLike
  ): Result;

  events: {
    "RequiredConfig(address,bytes32,uint256,bytes)": EventFragment;
    "RequiredSigner(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RequiredConfig"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequiredSigner"): EventFragment;
}

export class RequireUtils extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RequireUtilsInterface;

  functions: {
    knownImageHashes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "knownImageHashes(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    lastImageHashUpdate(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "lastImageHashUpdate(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lastSignerUpdate(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "lastSignerUpdate(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lastWalletUpdate(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "lastWalletUpdate(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    publishConfig(
      _wallet: string,
      _threshold: BigNumberish,
      _members: { weight: BigNumberish; signer: string }[],
      _index: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "publishConfig(address,uint256,tuple[],bool)"(
      _wallet: string,
      _threshold: BigNumberish,
      _members: { weight: BigNumberish; signer: string }[],
      _index: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    publishInitialSigners(
      _wallet: string,
      _hash: BytesLike,
      _sizeMembers: BigNumberish,
      _signature: BytesLike,
      _index: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "publishInitialSigners(address,bytes32,uint256,bytes,bool)"(
      _wallet: string,
      _hash: BytesLike,
      _sizeMembers: BigNumberish,
      _signature: BytesLike,
      _index: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requireMinNonce(
      _wallet: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "requireMinNonce(address,uint256)"(
      _wallet: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    requireNonExpired(
      _expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "requireNonExpired(uint256)"(
      _expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  knownImageHashes(arg0: string, overrides?: CallOverrides): Promise<string>;

  "knownImageHashes(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  lastImageHashUpdate(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "lastImageHashUpdate(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lastSignerUpdate(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "lastSignerUpdate(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lastWalletUpdate(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "lastWalletUpdate(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  publishConfig(
    _wallet: string,
    _threshold: BigNumberish,
    _members: { weight: BigNumberish; signer: string }[],
    _index: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "publishConfig(address,uint256,tuple[],bool)"(
    _wallet: string,
    _threshold: BigNumberish,
    _members: { weight: BigNumberish; signer: string }[],
    _index: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  publishInitialSigners(
    _wallet: string,
    _hash: BytesLike,
    _sizeMembers: BigNumberish,
    _signature: BytesLike,
    _index: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "publishInitialSigners(address,bytes32,uint256,bytes,bool)"(
    _wallet: string,
    _hash: BytesLike,
    _sizeMembers: BigNumberish,
    _signature: BytesLike,
    _index: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requireMinNonce(
    _wallet: string,
    _nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  "requireMinNonce(address,uint256)"(
    _wallet: string,
    _nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  requireNonExpired(
    _expiration: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  "requireNonExpired(uint256)"(
    _expiration: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    knownImageHashes(arg0: string, overrides?: CallOverrides): Promise<string>;

    "knownImageHashes(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    lastImageHashUpdate(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lastImageHashUpdate(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastSignerUpdate(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lastSignerUpdate(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastWalletUpdate(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lastWalletUpdate(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    publishConfig(
      _wallet: string,
      _threshold: BigNumberish,
      _members: { weight: BigNumberish; signer: string }[],
      _index: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "publishConfig(address,uint256,tuple[],bool)"(
      _wallet: string,
      _threshold: BigNumberish,
      _members: { weight: BigNumberish; signer: string }[],
      _index: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    publishInitialSigners(
      _wallet: string,
      _hash: BytesLike,
      _sizeMembers: BigNumberish,
      _signature: BytesLike,
      _index: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "publishInitialSigners(address,bytes32,uint256,bytes,bool)"(
      _wallet: string,
      _hash: BytesLike,
      _sizeMembers: BigNumberish,
      _signature: BytesLike,
      _index: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    requireMinNonce(
      _wallet: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "requireMinNonce(address,uint256)"(
      _wallet: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    requireNonExpired(
      _expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "requireNonExpired(uint256)"(
      _expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    RequiredConfig(
      _wallet: string | null,
      _imageHash: BytesLike | null,
      _threshold: null,
      _signers: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      {
        _wallet: string;
        _imageHash: string;
        _threshold: BigNumber;
        _signers: string;
      }
    >;

    RequiredSigner(
      _wallet: string | null,
      _signer: string | null
    ): TypedEventFilter<[string, string], { _wallet: string; _signer: string }>;
  };

  estimateGas: {
    knownImageHashes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "knownImageHashes(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastImageHashUpdate(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lastImageHashUpdate(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastSignerUpdate(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lastSignerUpdate(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastWalletUpdate(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lastWalletUpdate(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    publishConfig(
      _wallet: string,
      _threshold: BigNumberish,
      _members: { weight: BigNumberish; signer: string }[],
      _index: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "publishConfig(address,uint256,tuple[],bool)"(
      _wallet: string,
      _threshold: BigNumberish,
      _members: { weight: BigNumberish; signer: string }[],
      _index: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    publishInitialSigners(
      _wallet: string,
      _hash: BytesLike,
      _sizeMembers: BigNumberish,
      _signature: BytesLike,
      _index: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "publishInitialSigners(address,bytes32,uint256,bytes,bool)"(
      _wallet: string,
      _hash: BytesLike,
      _sizeMembers: BigNumberish,
      _signature: BytesLike,
      _index: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requireMinNonce(
      _wallet: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "requireMinNonce(address,uint256)"(
      _wallet: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requireNonExpired(
      _expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "requireNonExpired(uint256)"(
      _expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    knownImageHashes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "knownImageHashes(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastImageHashUpdate(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastImageHashUpdate(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastSignerUpdate(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastSignerUpdate(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastWalletUpdate(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastWalletUpdate(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publishConfig(
      _wallet: string,
      _threshold: BigNumberish,
      _members: { weight: BigNumberish; signer: string }[],
      _index: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "publishConfig(address,uint256,tuple[],bool)"(
      _wallet: string,
      _threshold: BigNumberish,
      _members: { weight: BigNumberish; signer: string }[],
      _index: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    publishInitialSigners(
      _wallet: string,
      _hash: BytesLike,
      _sizeMembers: BigNumberish,
      _signature: BytesLike,
      _index: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "publishInitialSigners(address,bytes32,uint256,bytes,bool)"(
      _wallet: string,
      _hash: BytesLike,
      _sizeMembers: BigNumberish,
      _signature: BytesLike,
      _index: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requireMinNonce(
      _wallet: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "requireMinNonce(address,uint256)"(
      _wallet: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireNonExpired(
      _expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "requireNonExpired(uint256)"(
      _expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

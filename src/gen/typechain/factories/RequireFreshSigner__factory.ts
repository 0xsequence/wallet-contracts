/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { RequireFreshSigner } from "../RequireFreshSigner";

export class RequireFreshSigner__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _requireUtils: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<RequireFreshSigner> {
    return super.deploy(
      _requireUtils,
      overrides || {}
    ) as Promise<RequireFreshSigner>;
  }
  getDeployTransaction(
    _requireUtils: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_requireUtils, overrides || {});
  }
  attach(address: string): RequireFreshSigner {
    return super.attach(address) as RequireFreshSigner;
  }
  connect(signer: Signer): RequireFreshSigner__factory {
    return super.connect(signer) as RequireFreshSigner__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RequireFreshSigner {
    return new Contract(address, _abi, signerOrProvider) as RequireFreshSigner;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "contract RequireUtils",
        name: "_requireUtils",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "REQUIRE_UTILS",
    outputs: [
      {
        internalType: "contract RequireUtils",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_signer",
        type: "address",
      },
    ],
    name: "requireFreshSigner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b506040516102af3803806102af8339818101604052602081101561003357600080fd5b5051606081901b6001600160601b0319166080526001600160a01b031661024461006b6000398060a352806101af52506102446000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80630df0c4191461003b578063cfc63a4914610070575b600080fd5b61006e6004803603602081101561005157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166100a1565b005b6100786101ad565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631cd05dc4826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561012857600080fd5b505afa15801561013c573d6000803e3d6000fd5b505050506040513d602081101561015257600080fd5b5051156101aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603d8152602001806101d2603d913960400191505060405180910390fd5b50565b7f00000000000000000000000000000000000000000000000000000000000000008156fe5265717569726546726573685369676e6572237265717569726546726573685369676e65723a205349474e45525f494e5f4f544845525f57414c4c4554a2646970667358221220314a384e55df0e0226404b2d40585e67d9c7a6e7df0640ea88f843b9c7910c8e64736f6c63430007060033";
